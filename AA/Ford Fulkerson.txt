from collections import defaultdict

class Graph:
    def __init__(self, graph):
        self.graph = graph
        self.row = len(graph)

    # Find if there is a path from source to sink
    def bfs(self, source, sink, parent):
        visited = [False] * (self.row)
        queue = [source]
        visited[source] = True

        while queue:
            u = queue.pop(0)
            for index, value in enumerate(self.graph[u]):
                if not visited[index] and value > 0:
                    queue.append(index)
                    visited[index] = True
                    parent[index] = u

        return True if visited[sink] else False

    # Find maximum flow using Ford-Fulkerson Algorithm
    def ford_fulkerson(self, source, sink):
        parent = [-1] * (self.row)
        max_flow = 0

        while self.bfs(source, sink, parent):
            path_flow = float("Inf")
            s = sink
            while s != source:
                path_flow = min(path_flow, self.graph[parent[s]][s])
                s = parent[s]

            max_flow += path_flow

            v = sink
            while v != source:
                u = parent[v]
                self.graph[u][v] -= path_flow
                self.graph[v][u] += path_flow
                v = parent[v]

        return max_flow

# Test the implementation
graph = [[0, 16, 13, 0, 0, 0],
         [0, 0, 10, 12, 0, 0],
         [0, 4, 0, 0, 14, 0],
         [0, 0, 9, 0, 0, 20],
         [0, 0, 0, 7, 0, 4],
         [0, 0, 0, 0, 0, 0]]
g = Graph(graph)
source = 0
sink = 5
print("Maximum flow: {}".format(g.ford_fulkerson(source, sink)))
